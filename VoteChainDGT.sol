// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VoteChainDGT {
    string public name = "VoteChainDGT";
    string public symbol = "DGT";
    uint8 public decimals = 0;
    uint256 public totalSupply;

    address public admin;
    uint256 public startTime;
    uint256 public endTime;

    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    struct Candidate {
        uint id;
        string title;
        string firstName;
        string lastName;
        string nickname;
        string partyName;
        string policy;
        uint partyNumber;
        uint voteCount;
        uint age;
    }

    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÇ‡∏´‡∏ß‡∏ï
    struct Voter {
        string title;
        string firstName;
        string lastName;
        string studentId;
        uint256 isRegistered; // 1 = ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß, 0 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        uint256 hasVoted; // 1 = ‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏•‡πâ‡∏ß, 0 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï
        uint256 usedTokens;  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ
    }

    mapping(address => Voter) public voters;
    Candidate[] public candidates;
    address[] public voterAddresses; // Array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    modifier onlyDuringVoting() {
        require(block.timestamp >= startTime && block.timestamp <= endTime, "Voting is not active");
        _;
    }

    modifier onlyOnce() {
        require(voters[msg.sender].hasVoted == 0, "You have already voted");
        _;
    }

    modifier onlyRegistered() {
        require(voters[msg.sender].isRegistered == 1, "You are not registered to vote");
        _;
    }

    modifier canRegister() {
        // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        require(block.timestamp >= startTime, "Voting period has not started yet");
        require(block.timestamp <= endTime, "Voting period has ended");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    function isValidID(string memory studentID) internal pure returns (bool) {
        if (bytes(studentID).length != 8) {
            return false;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
        bytes1 level = bytes(studentID)[0];  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô bytes1
        if (level != 'B' && level != 'M' && level != 'D') {
            return false;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì checksum
        uint checksum = (uint(uint8(bytes(studentID)[1])) - 48) * 49 +
                        (uint(uint8(bytes(studentID)[2])) - 48) * 7 +
                        (uint(uint8(bytes(studentID)[3])) - 48) * 49 +
                        (uint(uint8(bytes(studentID)[4])) - 48) * 7 +
                        (uint(uint8(bytes(studentID)[5])) - 48) * 49 +
                        (uint(uint8(bytes(studentID)[6])) - 48) * 7;
        checksum = checksum % 10;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        uint lastDigit = uint(uint8(bytes(studentID)[7])) - 48;
        return checksum == lastDigit;
    }

    // ------------------------
    // üìå Admin functions
    // ------------------------

    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á
    function setVotingPeriod(uint256 _startTime, uint256 _endTime) public onlyAdmin {
        require(_endTime > _startTime, "End time must be after start time");
        startTime = _startTime;
        endTime = _endTime;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    function addCandidate(
        uint _id,
        string memory _title, // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
        string memory _firstName,
        string memory _lastName,
        string memory _nickname, // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á _lastName
        string memory _partyName,
        string memory _policy,
        uint _partyNumber, // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡∏£‡∏Ñ
        uint _age // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    ) public onlyAdmin {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ _id ‡πÅ‡∏•‡∏∞ _partyNumber ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        require(_id == _partyNumber, "ID and Party Number must be the same");

        candidates.push(Candidate(_id, _title, _firstName, _lastName, _nickname, _partyName, _policy, _partyNumber, 0, _age));
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ï‡∏≤‡∏° _id
    function getCandidateById(uint _id) public view returns (
        uint id,
        string memory title, // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
        string memory firstName,
        string memory nickname,
        string memory lastName,
        string memory partyName,
        string memory policy,
        uint partyNumber,
        uint voteCount,
        uint age // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    ) {
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].id == _id) {
                Candidate memory candidate = candidates[i];
                return (
                    candidate.id,
                    candidate.title, // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
                    candidate.firstName,
                    candidate.nickname,
                    candidate.lastName,
                    candidate.partyName,
                    candidate.policy,
                    candidate.partyNumber,
                    candidate.voteCount,
                    candidate.age // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                );
            }
        }
        revert("Candidate not found");
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    function updateCandidate(
        uint _id,
        string memory _title, // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠
        string memory _firstName,
        string memory _lastName,
        string memory _nickname, // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á _lastName
        string memory _partyName,
        string memory _policy,
        uint _partyNumber, // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡∏£‡∏Ñ
        uint _age // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    ) public onlyAdmin {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö _id
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].id == _id) {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                candidates[i].title = _title;
                candidates[i].firstName = _firstName;
                candidates[i].lastName = _lastName;
                candidates[i].nickname = _nickname;
                candidates[i].partyName = _partyName;
                candidates[i].policy = _policy;
                candidates[i].partyNumber = _partyNumber;
                candidates[i].age = _age;
                return;
            }
        }
        revert("Candidate not found");
    }

    // ------------------------
    // üìå Voter functions
    // ------------------------

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÇ‡∏´‡∏ß‡∏ï
    function registerVoter(
        string memory _title, // ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        string memory _firstName,
        string memory _lastName,
        string memory _studentId
    ) public canRegister {
        require(voters[msg.sender].isRegistered == 0, "You are already registered");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        require(isValidID(_studentId), "Invalid student ID");

        // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÇ‡∏´‡∏ß‡∏ï
        voters[msg.sender] = Voter(_title, _firstName, _lastName, _studentId, 1, 0, 0);  // 1 = ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        voterAddresses.push(msg.sender); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡πÇ‡∏´‡∏ß‡∏ï
    }

    // ‡∏î‡∏π‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    function getRegisteredVotersWithTokens() public view returns (Voter[] memory) {
        Voter[] memory registeredVoters = new Voter[](voterAddresses.length);
        for (uint i = 0; i < voterAddresses.length; i++) {
            address voterAddr = voterAddresses[i];
            Voter storage voter = voters[voterAddr];
            registeredVoters[i] = Voter(
                voter.title,
                voter.firstName,
                voter.lastName,
                voter.studentId,
                voter.isRegistered,  // 1 = ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                voter.hasVoted,      // 1 = ‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏•‡πâ‡∏ß
                voter.usedTokens     // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            );
        }
        return registeredVoters;
    }

    // ‡πÇ‡∏´‡∏ß‡∏ï
    function vote(uint _partyNumber, string memory _studentId) public onlyDuringVoting onlyRegistered onlyOnce {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ _studentId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÇ‡∏´‡∏ß‡∏ï
        require(keccak256(bytes(voters[msg.sender].studentId)) == keccak256(bytes(_studentId)), "Student ID does not match");

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö _partyNumber
        bool found = false;
        for (uint i = 0; i < candidates.length; i++) {
            if (candidates[i].partyNumber == _partyNumber) {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö _partyNumber
                candidates[i].voteCount += 1;
                voters[msg.sender].hasVoted = 1;
                voters[msg.sender].usedTokens += 1;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
                found = true;
                break;
            }
        }

        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ _partyNumber ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
        require(found, "Invalid party number");
    }

    // ------------------------
    // üìå Token functions
    // ------------------------

    // Mint (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà)
    function mint(address to, uint256 amount) public onlyAdmin {
        totalSupply += amount;
        balanceOf[to] += amount;
    }

    // Burn (‡∏•‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÇ‡∏´‡∏ß‡∏ï)
    function burn(uint256 amount) public onlyRegistered {
        require(voters[msg.sender].hasVoted == 1, "You need to vote before burning your token");
        totalSupply -= amount;
        balanceOf[msg.sender] -= amount;
        voters[msg.sender].hasVoted = 0;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏ß‡∏ï
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ address
    mapping(address => uint256) public balanceOf;
}
